
/* CREATE TABLE EXERCISE */

CREATE TABLE friends (id INTEGER, name TEXT, birthday DATE);

INSERT INTO friends (id, name, birthday) VALUES (0, 'Jane Doe', '1990-05-30');

INSERT INTO friends (name, birthday) VALUES ('JC', '1987-01-07');

INSERT INTO friends (id, name, birthday) VALUES (1, 'Austin Blake', '01-01-1988');

INSERT INTO friends (id, name, birthday) VALUES (3, 'Mike Jung', '01-01-1987');

UPDATE friends
SET name = 'Mike Smith'
WHERE id = 3;

ALTER TABLE friends
ADD COLUMN email TEXT;

UPDATE friends
SET email = 'jane@codeacademy.com'
WHERE id = 0;

UPDATE friends
SET email = 'eablake@gmail.com'
WHERE id = 1;

UPDATE friends
SET email = 'jclevan@yahoo.com'
WHERE name = 'JC';

DELETE FROM friends
WHERE id = 3;

ALTER TABLE friends
ADD COLUMN phone NUMBER;

ALTER TABLE friends
ADD COLUMN instragram TEXT;

UPDATE friends
SET phone = '111-111-1111'

SELECT * FROM friends;

SELECT * FROM nomnom;

/* QUERIES - RESTAURANTS EXERCISE */

SELECT DISTINCT neighborhood FROM nomnom;

SELECT DISTINCT cuisine FROM nomnom;

SELECT * FROM nomnom
WHERE cuisine = 'Chinese';

SELECT * FROM nomnom
WHERE review >= 4.0;

SELECT * FROM nomnom
WHERE cuisine = 'Italian' AND price = '$$$';

SELECT * FROM nomnom
WHERE name LIKE '%meatball%';

SELECT * FROM nomnom
WHERE neighborhood = 'Midtown' OR neighborhood = 'Downtown' OR neighborhood = 'Chinatown';

SELECT * FROM nomnom
WHERE health IS NULL;

SELECT * FROM nomnom
ORDER BY review DESC LIMIT 10;

/* TRENDS IN STARTUPS EXERCISE */

SELECT * FROM startups;

SELECT COUNT(*) FROM startups;

SELECT SUM(VALUATION) FROM startups;

SELECT MAX(raised) FROM startups
WHERE stage = 'Seed';

SELECT MIN(founded) FROM startups;

SELECT AVG(valuation) FROM startups;

SELECT category, AVG(valuation) FROM startups
GROUP BY category;

/* MULTIPLE TABLES EXERCISE */

SELECT * FROM trips;
SELECT * FROM riders;
SELECT * FROM cars;

SELECT riders.first, riders.last, cars.model 
FROM riders, cars;

SELECT * 
FROM trips
LEFT JOIN riders ON trips.rider_id = riders.id;

SELECT trips.date, trips.pickup, trips.dropoff, trips.rider_id,
riders.first, riders.last
FROM trips
LEFT JOIN riders on trips.rider_id = riders.id;

SELECT * FROM trips JOIN cars ON trips.car_id = cars.id;

SELECT * FROM riders UNION SELECT * FROM riders2;

SELECT ROUND(AVG(COST),2) FROM trips;

SELECT * FROM riders WHERE total_trips < 500
UNION
SELECT * FROM riders2 WHERE total_trips < 500;

SELECT COUNT(*) FROM cars WHERE status = 'active';

SELECT * FROM cars ORDER BY trips_completed DESC 
LIMIT 2;
